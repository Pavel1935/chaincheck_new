import pytest
import requests
import jwt
from Constants import Constants
from conftest import get_user_role


class TestAccessRoles:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–Ω—ã–µ —Ä–æ–ª–∏ (user, moderator, admin)
    –∏–º–µ—é—Ç –∏–ª–∏ –Ω–µ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â—ë–Ω–Ω—ã–º –æ—Ç—á—ë—Ç–∞–º.
    """
    @pytest.mark.parametrize("tokens_by_email,email,expected_ok,expected_error", [
        pytest.param("pashkarob@gmail.com", "pashkarob@gmail.com", 0, "NO_PERMISSION", id="customer"),
        pytest.param("1@1.io", "1@1.io", 1, None, id="moderator"),
        pytest.param("oukb1147@gmail.com", "oukb1147@gmail.com", 1, None, id="admin"),
    ], indirect=["tokens_by_email"])  # üëà –ø–µ—Ä–µ–¥–∞—ë–º email –≤–Ω—É—Ç—Ä—å —Ñ–∏–∫—Å—Ç—É—Ä—ã
    def test_access_to_reports(self, tokens_by_email, email, expected_ok, expected_error):
        access_token = tokens_by_email["access_token"]
        endpoint = "/user/detail"
        url = Constants.API_URL + endpoint

        payload = {
            "email": email
        }

        headers = {'Authorization': 'Bearer ' + access_token}
        response = requests.post(url, json=payload, headers=headers)
        print(f"\n{email} ‚Üí {response.status_code}")
        print("RESPONSE TEXT:", response.text)

        data = response.json()
        # 7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º ok –∏ error
        assert data["ok"] == expected_ok, f"{email}: –æ–∂–∏–¥–∞–ª–æ—Å—å ok={expected_ok}, –ø–æ–ª—É—á–∏–ª–∏ {data['ok']}"
        if expected_error:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤, API –≤–µ—Ä–Ω—ë—Ç {"ok":0, "error":"NO_PERMISSION"}
            assert data["error"] == expected_error, f"{email}: –æ–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ {expected_error}"
        else:
            # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å email
            assert data["email"] == email

    """
    –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–∞–∫–µ—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–∞–∫–∞
    —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
    """
    @pytest.mark.parametrize("tokens_by_email,email", [
        pytest.param("pashkarob@gmail.com", "pashkarob@gmail.com", id="customer"),
        pytest.param("1@1.io", "1@1.io", id="moderator"),
        pytest.param("oukb1147@gmail.com", "oukb1147@gmail.com", id="admin"),
    ], indirect=["tokens_by_email"])
    def test_package_access_post(self, tokens_by_email, email):
        url = f"{Constants.API_URL}/package"
        access_token = tokens_by_email["access_token"]

        payload = {
            "title": "–ü–∞–∫–µ—Ç –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ",
            "count_checks": 10,
            "price_usd": "1",
            "ref_payout": "0"
        }
        headers = {'Authorization': f'Bearer {access_token}'}
        response = requests.post(url, headers=headers, json=payload, verify=False)
        data = response.json()
        print(data)

        if email == "pashkarob@gmail.com":
            assert data["ok"] == 0 and data["error"] == "NO_PERMISSION"
        else:
            assert data["ok"] == 1

        """
        –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º –ø–æ–º–µ–Ω—è—Ç—å –ø–∞–∫–µ—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–∞–∫–∞
        —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
        """

    # @pytest.mark.parametrize("tokens_by_email,email", [
    #     pytest.param("pashkarob@gmail.com", "pashkarob@gmail.com", id="customer"),
    #     pytest.param("1@1.io", "1@1.io", id="moderator"),
    #     pytest.param("oukb1147@gmail.com", "oukb1147@gmail.com", id="admin"),
    # ], indirect=["tokens_by_email"])
    # def test_package_access_put(self, tokens_by_email, email):
    #     url = f"{Constants.API_URL}/package"
    #     access_token = tokens_by_email["access_token"]
    #
    #     payload = {
    #         "title": "–†–∞–∑–î–≤–∞–¢—Ä–∏–ó–µ–Ω–∏—Ç—É—à–∫–∞–°–∞–º–∑–Ω–∞–µ—à—å",
    #         "count_checks": 10,
    #         "price_usd": "88",
    #         "ref_payout": "5"
    #     }
    #     headers = {'Authorization': f'Bearer {access_token}'}
    #     response = requests.put(url, headers=headers, json=payload, verify=False)
    #     data = response.json()
    #     print(data)


        """ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –∑–∞–ª–æ–≥–∏–Ω–∏–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
    @pytest.mark.parametrize("tokens_by_email,email,expected_role", [
        pytest.param("1@2.io", "1@2.io", 1, id="customer"),  # –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        pytest.param("1@1.io", "1@1.io", 2, id="moderator"),  # –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
        pytest.param("oukb1147@gmail.com", "oukb1147@gmail.com", 3, id="admin"),  # –∞–¥–º–∏–Ω
    ], indirect=["tokens_by_email"])  # üëà –ø–µ—Ä–µ–¥–∞—ë–º email –≤–Ω—É—Ç—Ä—å —Ñ–∏–∫—Å—Ç—É—Ä—ã
    def test_check_role_logged_user(self, tokens_by_email,email,expected_role, db_conn):

        role = get_user_role(db_conn, email)
        print(f"User role from DB for {email}: {role}")

        assert role is not None, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î!"
        assert role == expected_role, f"{email}: –æ–∂–∏–¥–∞–ª–∞—Å—å —Ä–æ–ª—å {expected_role}, –ø–æ–ª—É—á–∏–ª–∏ {role}"

    # """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞"""
        # if role == 1:
        #     # Customer –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø
        #     assert data["ok"] == 0, f"{email}: –æ–∂–∏–¥–∞–ª—Å—è –æ—Ç–∫–∞–∑ –¥–æ—Å—Ç—É–ø–∞, –ø–æ–ª—É—á–∏–ª–∏ {data}"
        #     assert data.get("error") == "NO_PERMISSION", f"{email}: –æ–∂–∏–¥–∞–ª—Å—è error=NO_PERMISSION"
        # elif role in (2, 3):
        #     # Moderator –∏ Admin –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø
        #     assert data["ok"] == 1, f"{email}: –æ–∂–∏–¥–∞–ª—Å—è —É—Å–ø–µ—Ö, –ø–æ–ª—É—á–∏–ª–∏ {data}"
        # else:
        #     pytest.fail(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å: {role}")
        #
