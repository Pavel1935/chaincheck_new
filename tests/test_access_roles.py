import pytest
import requests
import jwt
from Constants import Constants


class TestAccessRoles:
    @pytest.mark.parametrize("tokens_by_email,email,expected_ok,expected_error", [
        pytest.param("pashkarob@gmail.com", "pashkarob@gmail.com", 0, "NO_PERMISSION", id="customer"),
        pytest.param("1@1.io", "1@1.io", 1, None, id="moderator"),
        pytest.param("oukb1147@gmail.com", "oukb1147@gmail.com", 1, None, id="admin"),
    ], indirect=["tokens_by_email"])  # üëà –ø–µ—Ä–µ–¥–∞—ë–º email –≤–Ω—É—Ç—Ä—å —Ñ–∏–∫—Å—Ç—É—Ä—ã
    def test_access_to_reports(self, tokens_by_email, email, expected_ok, expected_error):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–Ω—ã–µ —Ä–æ–ª–∏ (user, moderator, admin)
        –∏–º–µ—é—Ç –∏–ª–∏ –Ω–µ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â—ë–Ω–Ω—ã–º –æ—Ç—á—ë—Ç–∞–º.
        """
        access_token = tokens_by_email["access_token"]
        endpoint = "/user/detail"
        url = Constants.API_URL + endpoint

        payload = {
            "email": email
        }

        headers = {'Authorization': 'Bearer ' + access_token}
        response = requests.post(url, json=payload, headers=headers)
        print(f"\n{email} ‚Üí {response.status_code}")
        print("RESPONSE TEXT:", response.text)

        data = response.json()
        # 7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º ok –∏ error
        assert data["ok"] == expected_ok, f"{email}: –æ–∂–∏–¥–∞–ª–æ—Å—å ok={expected_ok}, –ø–æ–ª—É—á–∏–ª–∏ {data['ok']}"
        if expected_error:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤, API –≤–µ—Ä–Ω—ë—Ç {"ok":0, "error":"NO_PERMISSION"}
            assert data["error"] == expected_error, f"{email}: –æ–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ {expected_error}"
        else:
            # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å email
            assert data["email"] == email

    @pytest.mark.parametrize("tokens_by_email,email", [
        pytest.param("pashkarob@gmail.com", "pashkarob@gmail.com", id="customer"),
        pytest.param("1@1.io", "1@1.io", id="moderator"),
        pytest.param("oukb1147@gmail.com", "oukb1147@gmail.com", id="admin"),
    ], indirect=["tokens_by_email"])
    def test_package_access(self, tokens_by_email, email):
        url = f"{Constants.API_URL}/package"
        access_token = tokens_by_email["access_token"]

        # 1Ô∏è‚É£ –†–∞—Å–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        decoded = jwt.decode(access_token, options={"verify_signature": False})
        role = decoded.get("user_role")
        print(f"{email}: user_role = {role}")

        # 2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        payload = {
            "title": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç",
            "count_checks": 10,
            "price_usd": "1",
            "ref_payout": "0"
        }
        headers = {'Authorization': f'Bearer {access_token}'}
        response = requests.post(url, headers=headers, json=payload, verify=False)
        data = response.json()
        print(data)

        # # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞
        # if role == 1:
        #     # Customer –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø
        #     assert data["ok"] == 0, f"{email}: –æ–∂–∏–¥–∞–ª—Å—è –æ—Ç–∫–∞–∑ –¥–æ—Å—Ç—É–ø–∞, –ø–æ–ª—É—á–∏–ª–∏ {data}"
        #     assert data.get("error") == "NO_PERMISSION", f"{email}: –æ–∂–∏–¥–∞–ª—Å—è error=NO_PERMISSION"
        # elif role in (2, 3):
        #     # Moderator –∏ Admin –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø
        #     assert data["ok"] == 1, f"{email}: –æ–∂–∏–¥–∞–ª—Å—è —É—Å–ø–µ—Ö, –ø–æ–ª—É—á–∏–ª–∏ {data}"
        # else:
        #     pytest.fail(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å: {role}")
        #
